{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAAe,I,MCEFA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAY,iBAAjB,UACA,qBAAKC,IAAM,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACxB,mCAAOL,EAAMI,QAAQE,KAArB,OACA,kCAAKN,EAAMI,QAAQG,aCFVC,EAAW,SAACR,GACrB,OAAO,qBAAKC,UAAU,YAAf,SAEAD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAM,cAAC,EAAD,CAAwBA,QAAWA,GAAvBA,EAAQC,UCJlDM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOZ,UAAY,iBACnBa,KAAO,SAASF,YAAeA,EAAaG,SAAYF,MC+B7CG,E,kDA7Bb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAJJ,E,qDAOb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,oBAG1C,WAAU,IAAD,SAC0BE,KAAKR,MAA/BR,EADA,EACAA,SAAUS,EADV,EACUA,YACXQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAAIA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBACtG,OACE,sBAAK3B,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CACAW,YAAc,kBACdC,aAAgB,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAC,YAAeM,EAAEC,OAAOC,WAE5D,cAAC,EAAD,CAAUvB,SAAYiB,W,GAxBRO,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e194d54c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'; \n\nexport const Card = (props) => (\n    <div className = 'card-container'>\n    <img alt = \"monster\" src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n    <h2> { props.monster.name } </h2> \n    <p> {props.monster.email}</p>\n    </div>\n)","import React from 'react'; \n\nimport { Card } from '../card/card.component';\n\nexport const CardList = (props) => {\n    return <div className='card-list'>\n        {\n           props.monsters.map(monster => ( <Card key= {monster.id} monster = {monster}/> \n             ))} \n    </div>; \n\n};","import React from 'react';\n\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input className = 'searchMonsters'\n    type = 'search' placeholder = {placeholder} onChange = {handleChange}\n    />\n)","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { CardList } from './components/card-list/card-list.component.jsx'; \nimport './App.css';\nimport {SearchBox} from './components/search-box/search-box.component.jsx';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n  componentDidMount(){\n    fetch('https://jsonPlaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  render() { \n    const{ monsters, searchField } = this.state;  \n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n  return (\n    <div className=\"App\">\n    <h1>Monsters Rolodex</h1>\n    <SearchBox \n    placeholder = 'search monsters' \n    handleChange = {e => this.setState({'searchField': e.target.value})}\n    />\n    <CardList monsters = {filteredMonsters}/> \n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}